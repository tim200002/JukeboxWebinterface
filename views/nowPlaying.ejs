<html>

<head>
    <title>Spotify Web Playback SDK Quick Start Tutorial</title>
    <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>
    <h1> <%= name %> </h1>
    <p id="partyIdParagraph">To Join this Party please enter the Party Id: <%= partyId %></p>
    <div id="nowPlayingDiv" , class="inlineDiv">
        <h2 id="currentSongTextField"></h2>
        <img src= <%= albumArt %>  width="500" id="nowPlayingImage">
    </div>
    
    <div id="playlistDiv" class="inlineDiv">
       <h2>Next Tracks:</h2> 
        <ul style="list-style: none;" id="playlistList">
        </ul>

    </div>


    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
        var partyId = "<%= partyId %>"
        console.log("partyId: " + partyId)
        var player
        var socket = io.connect('http://localhost:8080/webapp')

        function makePlaylist(playlist) {
            var list = document.getElementById("playlistList")
            list.innerHTML = ""
            for (var i = 0; i < playlist.length; ++i) {
                var item = document.createElement("li");

                item.innerHTML =
                    `<img src=${playlist[i].albumArt} class=\"playlistImage\" width=\"50\">` +
                    "<div class=\"playlistItem\">" +
                    `<h3>${playlist[i].title}</h3>` +
                    playlist[i].artist +
                    "</div>"

                list.appendChild(item)
            }


        }

        //When song changes -> new list of all Songs to construct playlist.
        socket.on("update", (data) => {
            console.log("update")
            if(data.queue.length>8) data.queue.slice(0,9)
            makePlaylist(data.queue.slice(1))
        })

        onSpotifyWebPlaybackSDKReady = () => {
            console.log("Web API Ready")
            player = new Spotify.Player({
                name: 'Jukebox',
                getOAuthToken: cb => {
                    console.log("get token")
                    //Make API Call
                    const config = {
                        params: {
                            partyId: partyId
                        }
                    }
                    axios.get('http://localhost:8080/party/accessToken', config).then(function (response) {
                        console.log(response.data.accessToken)
                        cb(response.data.accessToken)
                    })
                        .catch(err => {
                            console.log(err.message)
                        }
                        )
                }
            });
            // Error handling
            player.addListener('initialization_error', ({ message }) => { console.error(message); });
            player.addListener('authentication_error', ({ message }) => { console.error(message); });
            player.addListener('account_error', ({ message }) => { console.error(message); });
            player.addListener('playback_error', ({ message }) => { console.error(message); });

            player.addListener('player_state_changed', state => {
                console.log(state.track_window.current_track.name)
                document.getElementById("currentSongTextField").innerHTML = state.track_window.current_track.name
                document.getElementById("nowPlayingImage").src = state.track_window.current_track.album.images[0].url
                socket.emit('player_state_changed', { position: state.position, duration: state.duration, paused: state.paused, song: state.track_window.current_track.id, partyId: partyId })
                console.log(state);

            });

            // Ready
            player.addListener('ready', ({ device_id }) => {

                console.log('Ready with Device ID', device_id);
                socket.emit("device_id", { device_id: device_id, partyId: partyId })
            });

            // Not Ready
            player.addListener('not_ready', ({ device_id }) => {
                console.log('Device ID has gone offline', device_id);
            });




            // Connect to the player!
            player.connect();
        }
        function connectToSpotifyApi(partyId) {
            const player = new Spotify.Player({
                name: 'Jukebox',
                getOAuthToken: cb => {
                    console.log("get token")
                    //Make API Call
                    const config = {
                        params: {
                            partyId: partyId
                        }
                    }
                    axios.get('http://localhost:8080/party/accessToken', config).then(function (response) {
                        console.log(response.data.accessToken)
                        cb(response.data.accessToken)
                    })
                        .catch(err => {
                            console.log(err.message)
                        }
                        )
                }
            });

            // Error handling
            player.addListener('initialization_error', ({ message }) => { console.error(message); });
            player.addListener('authentication_error', ({ message }) => { console.error(message); });
            player.addListener('account_error', ({ message }) => { console.error(message); });
            player.addListener('playback_error', ({ message }) => { console.error(message); });



            // Connect to the player!
            player.connect();
            return player
        };


        function connect() {
            if (player) {
                console.log("Disconnenctig curren player")

                player.disconnect()
            }
            const partyId = document.getElementById('partyId').value
            console.log("Hello")

            player = connectToSpotifyApi(partyId)
            // Playback status updates
            player.addListener('player_state_changed', state => {
                console.log(state.track_window.current_track.name)
                document.getElementById("currentSongTextField").innerHTML = "Song: " + state.track_window.current_track.name
                document.getElementById("nowPlayingImage").src = state.track_window.current_track.album.images[0].url
                socket.emit('player_state_changed', { position: state.position, duration: state.duration, paused: state.paused, song: state.track_window.current_track.id, partyId: partyId })
                console.log(state);

            });

            // Ready
            player.addListener('ready', ({ device_id }) => {

                console.log('Ready with Device ID', device_id);
                socket.emit("device_id", { device_id: device_id, partyId: partyId })
            });

            // Not Ready
            player.addListener('not_ready', ({ device_id }) => {
                console.log('Device ID has gone offline', device_id);
            });
        }

        function toogle() {
            player.togglePlay()
        }

    </script>
</body>

</html>